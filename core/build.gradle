/**
 * Core module build script : see buildconfig.core.default.gradle for configuration
 */

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'gradle.plugin.de.fuerstenau:BuildConfigPlugin:1.1.7'
    }
}

plugins {
    id "java"
}

sourceCompatibility = "1.7"
targetCompatibility = "1.7"

jar {
    //Exclude factory classes that are intended to be replaced by platform specific implementations
    exclude("com/ustadmobile/core/impl/AcquisitionManagerFactory.class")
}

repositories {
    mavenCentral()
    maven {
        url "http://devserver2.ustadmobile.com/repo-mvn"
    }
}

dependencies {
    compile "org.json:json:20160212";
    compile "net.sf.kxml:kxml2:2.3.0";
    compile 'com.ustadmobile.qrcodelibomrfork:qrcode-core:1.0-SNAPSHOT'
    //compile 'com.ustadmobile:nanolrs-core:0.1.48'
    testCompile project(":core-tests")
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

ext.buildConfigProperties = new Properties()
ext.buildConfigProperties.load(new FileInputStream(rootProject.file("buildconfig.default.properties")))
if(rootProject.file("buildconfig.local.properties").exists()) {
    ext.buildConfigProperties.load(new FileInputStream(rootProject.file("buildconfig.local.properties")))
}



/**
 * Note: This is compiled into the main source directory (then gitignore'd) because Android studio
 * will otherwise mark it as an unresolved reference if we use the default generated sources directory.
 */
task generateCoreBuildConfig (type: de.fuerstenau.gradle.buildconfig.GenerateBuildConfigTask) {
    //inputs.files(rootProject.files("buildconfig.*.properties"))
    inputs.files(rootProject.files("buildconfig.local.properties"))
    inputs.files(rootProject.files("buildconfig.default.properties"))
    outputDir = new File ("${projectDir}/src/main/java")
    packageName = "com.ustadmobile.core.buildconfig"
    appName = project.ext.buildConfigProperties['appName']
    clsName = "CoreBuildConfig"

    ArrayList<String> baseMenuTypes = new ArrayList<>()
    baseMenuTypes.add("guest")
    baseMenuTypes.add("authenticated")

    for(int i = 0; i < baseMenuTypes.size(); i++) {
        String menuTypePrefix = "baseMenu." + baseMenuTypes.get(i)
        int menuItemIndex = 0
        String menuItemTitle=null
        ArrayList<String> titleIdsList = new ArrayList<>()
        ArrayList<String> destinationsList = new ArrayList<>()
        ArrayList<String> iconList = new ArrayList<>()

        while((menuItemTitle = project.ext.buildConfigProperties.getProperty(menuTypePrefix + "." + menuItemIndex + ".title")) != null) {
            String itemPrefix = menuTypePrefix + "." + menuItemIndex
            String itemDest = project.ext.buildConfigProperties.getProperty(itemPrefix + ".dest")
            if(itemDest == null || itemDest.equals("null")) {
                break
            }

            titleIdsList.add(menuItemTitle)
            destinationsList.add(itemDest)
            iconList.add(project.ext.buildConfigProperties.getProperty(itemPrefix + ".icon"))
            menuItemIndex++
        }

        String basePointMenuArrayStr = "new com.ustadmobile.core.view.BasePointMenuItem[]{"
        for(int j = 0; j< titleIdsList.size(); j++) {
            String titleIdVal = titleIdsList.get(j)
            if(titleIdsList[i].startsWith("MessageIDConstants")) {
                titleIdVal = "com.ustadmobile.core." + titleIdVal
            }
            basePointMenuArrayStr += "new com.ustadmobile.core.view.BasePointMenuItem("+ titleIdVal + ", \"" + destinationsList.get(j) + "\", " + (iconList.get(j) != null ? "\""+iconList.get(j) + "\"": "null") +")"
            if(j < titleIdsList.size()-1){
                basePointMenuArrayStr += ", "
            }
        }
        basePointMenuArrayStr += "}"

        buildConfigField "com.ustadmobile.core.view.BasePointMenuItem[]", "BASEPOINT_MENU_" + baseMenuTypes.get(i).toUpperCase(),basePointMenuArrayStr
    }


    /*
    while((menuItemTitle = project.ext.buildConfigProperties.getProperty("baseMenu." + menuItemIndex + ".title")) != null) {
        String itemPrefix = "baseMenu." + menuItemIndex
        String itemDest = project.ext.buildConfigProperties.getProperty(itemPrefix + ".dest")
        if(itemDest == null || itemDest.equals("null")) {
            break
        }

        titleIdsList.add(menuItemTitle)
        destinationsList.add(itemDest)
        iconList.add(project.ext.buildConfigProperties.getProperty(itemPrefix + ".icon"))
        menuItemIndex++
    }

    String basePointMenuArrayStr = "new com.ustadmobile.core.view.BasePointMenuItem[]{"
    for(int i = 0; i< titleIdsList.size(); i++) {
        String titleIdVal = titleIdsList.get(i)
        if(titleIdsList[i].startsWith("MessageIDConstants")) {
            titleIdVal = "com.ustadmobile.core." + titleIdVal
        }
        basePointMenuArrayStr += "new com.ustadmobile.core.view.BasePointMenuItem("+ titleIdVal + ", \"" + destinationsList.get(i) + "\", " + (iconList.get(i) != null ? "\""+iconList.get(i) + "\"": "null") +")"
        if(i < titleIdsList.size()-1){
            basePointMenuArrayStr += ", "
        }
    }
    basePointMenuArrayStr += "}"
    */

    buildConfigField "boolean", "OPDS_ITEM_ENABLE_BACKGROUNDS", project.ext.buildConfigProperties["appOpdsBackgroundsEnable"]
    buildConfigField "String", "BASEPOINT_CATALOG_URL", project.ext.buildConfigProperties["appBasepointCatalogUrl"]
    buildConfigField "String", "BASEPOINT_BROWSEBUTTON_URL", project.ext.buildConfigProperties["appBasepointBrowseButtonUrl"]
    buildConfigField "boolean", "BASEPOINT_BROWSEBUTTON_ENABLED", project.ext.buildConfigProperties["appBasepointBrowseButtonUrl"].equals("") ? "false" : "true"
    buildConfigField "boolean", "LOGIN_TITLEBAR_VISIBLE", project.ext.buildConfigProperties["appLoginTitleBarVisible"]
    buildConfigField "String", "FIRST_DESTINATION", project.ext.buildConfigProperties["appFirstDest"]
    buildConfigField "boolean", "LOGIN_BEFORE_FIRST_DESTINATION", project.ext.buildConfigProperties["appLoginBeforeFirstDest"]
    buildConfigField "boolean", "LOGIN_BEFORE_DOWNLOAD", project.ext.buildConfigProperties["appLoginBeforeDownload"]
}
compileJava.dependsOn(generateCoreBuildConfig)

task prepareLocale {
    inputs.files("core/locale/*/*.properties")
    doLast {
        File coreLocaleDir = rootProject.file("core/locale/main")
        String[] coreLocaleFileNames = coreLocaleDir.listFiles(new FilenameFilter() {
            @Override
            boolean accept(File file, String s) {
                return s.endsWith(".properties")
            }
        })

        File localeDir = project.file("src/main/assets/locale")
        if(!localeDir.isDirectory()) {
            localeDir.mkdir()
        }

        for(int i = 0; i < coreLocaleFileNames.length; i++){
            Properties locale = new Properties()
            File mainLocaleFile = new File(coreLocaleFileNames[i])
            locale.load(new FileReader(mainLocaleFile))
            String nameOnly = coreLocaleFileNames[i]
            System.out.println("Path Sep = '" + File.separator +"'")
            if(nameOnly.contains(File.separator)) {
                nameOnly = nameOnly.substring(nameOnly.lastIndexOf(File.separator)+1)
            }

            System.out.println("Name only = " + nameOnly)
            String localFileName = "core/locale/localconfig/" + nameOnly
            File localConfigMatch = rootProject.file(localFileName)
            if(localConfigMatch.exists()) {
                locale.load(new FileReader(localConfigMatch))
            }



            File mergedDestFile = rootProject.file("core/src/main/assets/locale/" + nameOnly)
            locale.store(new FileWriter(mergedDestFile), "DO NOT EDIT! This is an automerge of main and localconfig locale properties and will be overwritten on build")
        }
    }
}

compileJava.dependsOn(prepareLocale)
